# Default tool config file. See also setup.cfg for tools that don't yet
# support pyproject.toml.

[tool.black]
line-length = 88
target_version = ['py37']
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | boxoffice/assets
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
line_length = 88
order_by_type = true
use_parentheses = true
from_first = true
known_future_library = ['__future__', 'six']
known_repo = ['boxoffice']
known_first_party = ['baseframe', 'coaster', 'flask_lastuser']
default_section = 'THIRDPARTY'
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'REPO', 'LOCALFOLDER']

[tool.pytest.ini_options]
minversion = "6.1"
required_plugins = [
  'pytest-cov',
  'pytest-dotenv',
  'pytest-env',
  'pytest-remotedata',
  'pytest-rerunfailures',
  'requests-mock',
]
addopts = '--cov-report=term-missing'
filterwarnings = ['ignore::DeprecationWarning', 'ignore::UserWarning']
remote_data_strick = true
env = ['FLASK_ENV=testing']
env_override_existing_values = false
env_files = ['.env', '.env.testing']

[tool.curlylint]
include = '\.jinja2$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | funnel/assets
)/
'''

[tool.curlylint.rules]
# Indent 2 spaces
indent = 2
# All role attributes must be valid.
# See https://www.curlylint.org/docs/rules/aria_role.
aria_role = true
# The `alt` attribute must be present.
# See https://www.curlylint.org/docs/rules/image_alt.
image_alt = true

[tool.mypy]
files = '**/*.py'
exclude = 'node_modules'
ignore_missing_imports = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = false
check_untyped_defs = false

[tool.pylint.master]
max-parents = 10
init-hook = """
import os, astroid.bases, pathlib
# Tell Pylint where to find packages from within tests
for path in pathlib.Path.cwd().parents:
    if (path / 'pyproject.toml').is_file():
      sys.path.append(str(path))
# Tell Pylint hybrid_property and cached_property are property-types
astroid.bases.POSSIBLE_PROPERTIES.add('hybrid_property')
astroid.bases.POSSIBLE_PROPERTIES.add('cached_property')
"""

[tool.pylint.message_control]
max-line-length = 88
disable = [
  'comparison-with-callable',  # Pylint is confused by SQLAlchemy attributes
  'using-constant-test',  # Pylint is again confused by SQLAlchemy attributes
  'cyclic-import',  # We have tail imports all over
  'duplicate-code',  # Too many false positives
  'fixme',  # Our workflow is to tag for future fixes
  'invalid-name',  # Flake8 covers our naming convention requirements
  'line-too-long',  # Long lines are okay if Black doesn't wrap them
  'no-member',  # Pylint gets confused over how some members become part of an instance
  'too-few-public-methods',  # Data classes and validator classes have few methods
  'too-many-ancestors',  # Our models have a large number of mixin classes
  'too-many-arguments',  # Callables can have many optional arguments
  'too-many-instance-attributes',  # Some instances are just bags of attributes
  'too-many-lines',  # We have large files that include all related functionality
  'too-many-public-methods',  # Models and views have many public methods
  'unused-argument',  # Arguments required for spec compatibility aren't always used
  'wrong-import-position',  # Let black and isort handle this

  # Temporarily disabled pending audit and fixes
  'missing-module-docstring',
  'missing-class-docstring',
  'missing-function-docstring',
  'too-many-branches',
  'too-many-nested-blocks',
  'too-many-return-statements',
  'too-many-statements',
  'too-many-locals',

]

[tool.bandit]
exclude_dirs = ['node_modules']
skips = [
  'B113',  # Handled by pylint; bandit incorrectly flags requests_mock for timeout
  'B608',  # Raw SQL detector is noisy for migrations and not configurable
  ]

[tool.bandit.assert_used]
skips = ['**/*_test.py', '**/test_*.py', '**/conftest.py']

[tool.ruff]
# This is a slight customisation of the default rules
# 1. Funnel still targets Python 3.7 pending an upgrade of production environment
# 2. Rule E402 (module-level import not top-level) is disabled as isort handles it
# 3. Rule E501 (line too long) is left to Black; some strings are worse for wrapping

# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = ["E402"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Target Python 3.7
target-version = "py37"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
