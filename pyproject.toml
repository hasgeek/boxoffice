# Default tool config file. See also setup.cfg for tools that don't yet
# support pyproject.toml.

[tool.black]
line-length = 88
target-version = ['py311']
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | boxoffice/assets
)/
'''

[tool.isort]
# Some isort functionality is replicated in ruff, which should have matching config
profile = 'black'
multi_line_output = 3
include_trailing_comma = true
line_length = 88
order_by_type = true
use_parentheses = true
from_first = false
combine_as_imports = true
split_on_trailing_comma = false
known_repo = ['boxoffice']
known_first_party = ['baseframe', 'coaster', 'flask_lastuser']
default_section = 'THIRDPARTY'
sections = [
  'FUTURE',
  'STDLIB',
  'THIRDPARTY',
  'FIRSTPARTY',
  'REPO',
  'LOCALFOLDER',
]

[tool.pytest.ini_options]
minversion = "6.1"
required_plugins = [
  'pytest-cov',
  'pytest-dotenv',
  'pytest-env',
  'pytest-rerunfailures',
  'pytest-socket',
  'requests-mock',
]
addopts = [
  '--allow-hosts=127.0.0.1,::1', # Add Docker IPs here
  '--allow-unix-socket',         # Required for Selenium driver when frontend tests are added
  '--cov-report=term-missing',
  '--strict-markers',
]
markers = ['noclient: Disable Flask app client']
env = ['FLASK_ENV=testing', 'FLASK_TESTING=true']
env_override_existing_values = false
env_files = ['.env', '.testenv', '.env', '.env.testing']

[tool.curlylint]
include = '\.jinja2$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | funnel/assets
)/
'''

[tool.curlylint.rules]
# Indent 2 spaces
indent = 2
# All role attributes must be valid.
# See https://www.curlylint.org/docs/rules/aria_role.
aria_role = true
# The `alt` attribute must be present.
# See https://www.curlylint.org/docs/rules/image_alt.
image_alt = true

[tool.mypy]
files = '**/*.py'
exclude = 'node_modules'
ignore_missing_imports = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = false
check_untyped_defs = false

[tool.pylint.master]
max-parents = 10
init-hook = """
import os, astroid.bases, pathlib
# Tell Pylint where to find packages from within tests
for path in pathlib.Path.cwd().parents:
    if (path / 'pyproject.toml').is_file():
      sys.path.append(str(path))
# Tell Pylint hybrid_property and cached_property are property-types
astroid.bases.POSSIBLE_PROPERTIES.add('hybrid_property')
astroid.bases.POSSIBLE_PROPERTIES.add('cached_property')
"""

[tool.pylint.message_control]
max-line-length = 88
disable = [
  'comparison-with-callable',     # Pylint is confused by SQLAlchemy attributes
  'using-constant-test',          # Pylint is again confused by SQLAlchemy attributes
  'cyclic-import',                # We have tail imports all over
  'duplicate-code',               # Too many false positives
  'fixme',                        # Our workflow is to tag for future fixes
  'invalid-name',                 # Flake8 covers our naming convention requirements
  'line-too-long',                # Long lines are okay if Black doesn't wrap them
  'no-member',                    # Pylint gets confused over how some members become part of an instance
  'too-few-public-methods',       # Data classes and validator classes have few methods
  'too-many-ancestors',           # Our models have a large number of mixin classes
  'too-many-arguments',           # Callables can have many optional arguments
  'too-many-instance-attributes', # Some instances are just bags of attributes
  'too-many-lines',               # We have large files that include all related functionality
  'too-many-public-methods',      # Models and views have many public methods
  'unused-argument',              # Arguments required for spec compatibility aren't always used
  'wrong-import-position',        # Let black and isort handle this

  # Temporarily disabled pending audit and fixes
  'missing-module-docstring',
  'missing-class-docstring',
  'missing-function-docstring',
  'too-many-branches',
  'too-many-nested-blocks',
  'too-many-return-statements',
  'too-many-statements',
  'too-many-locals',

]

[tool.bandit]
exclude_dirs = ['node_modules']
skips = [
  'B113', # Handled by pylint; bandit incorrectly flags requests_mock for timeout
  'B608', # Raw SQL detector is noisy for migrations and not configurable
]

[tool.bandit.assert_used]
skips = ['**/*_test.py', '**/test_*.py', '**/conftest.py']

[tool.ruff]
# This is a slight customisation of the default rules
# 1. Rule E402 (module-level import not top-level) is disabled as isort handles it
# 2. Rule E501 (line too long) is left to Black; some strings are worse for wrapping
# 3. Rule S101 is disruptive in tests, so it's left to Bandit

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

# Same as Black.
line-length = 88

# Target Python 3.11
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true
quote-style = "preserve"

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

select = [
  "A",     # flake8-builtins
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C",     # pylint convention
  "D",     # pydocstyle
  "C4",    # flake8-comprehensions
  "C90",   # mccabe
  "E",     # Error
  "EM",    # flake8-errmsg
  "EXE",   # flake8-executable
  "F",     # pyflakes
  "FA",    # flake8-future-annotations
  "G",     # flake8-logging-format
  "I",     # isort
  "INP",   # flake8-no-pep420
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-str-concat
  "N",     # pep8-naming
  "PIE",   # flake8-pie
  "PT",    # flake8-pytest-style
  "PYI",   # flake8-pyi
  "RET",   # flake8-return
  "RUF",   # Ruff
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLOT",  # flake8-slots
  "T20",   # flake8-print
  "TRIO",  # flake8-trio
  "UP",    # pyupgrade
  "W",     # Warnings
  "YTT",   # flake8-2020
]
ignore = [
  "ANN002",
  "ANN003",
  "ANN101",
  "ANN102",
  "ANN401",
  "C901",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D107",
  "D203",
  "D212",
  "E402",
  "E501",
  "EM101",   # Allow Exception("string")
  "EM102",   # Allow Exception(f"string")
  "ISC001",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow these characters in strings
allowed-confusables = ["‘", "’"]

# Unlike Flake8, default to a complexity level of 10.
mccabe.max-complexity = 10

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["E402"]            # Allow non-top-level imports
"tests/**.py" = ["S101", "ANN001"]  # Allow assert; don't require fixture typing
"migrations/**.py" = ["INP001"]     # Not a package
"scripts/**.py" = ["INP001", "ANN"] # Not a package; typing optional
"instance/**.py" = ["INP001"]       # Not a package

[tool.ruff.lint.isort]
# These config options should match isort config above under [tool.isort]
combine-as-imports = true
split-on-trailing-comma = false
relative-imports-order = 'furthest-to-closest'
known-first-party = ['baseframe', 'coaster', 'flask_lastuser']
section-order = [
  'future',
  'standard-library',
  'third-party',
  'first-party',
  'repo',
  'local-folder',
]

[tool.ruff.lint.isort.sections]
repo = ['boxoffice']

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
